/*
Deployment script for PyrkonData

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "PyrkonData"
:setvar DefaultFilePrefix "PyrkonData"
:setvar DefaultDataPath ""
:setvar DefaultLogPath ""

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [master];


GO

IF (DB_ID(N'$(DatabaseName)') IS NOT NULL) 
BEGIN
    ALTER DATABASE [$(DatabaseName)]
    SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
    DROP DATABASE [$(DatabaseName)];
END

GO
PRINT N'Creating $(DatabaseName)...'
GO
CREATE DATABASE [$(DatabaseName)] COLLATE SQL_Latin1_General_CP1_CI_AS
GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                NUMERIC_ROUNDABORT OFF,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON,
                CURSOR_DEFAULT LOCAL,
                RECOVERY FULL,
                CURSOR_CLOSE_ON_COMMIT OFF,
                AUTO_CREATE_STATISTICS ON,
                AUTO_SHRINK OFF,
                AUTO_UPDATE_STATISTICS ON,
                RECURSIVE_TRIGGERS OFF 
            WITH ROLLBACK IMMEDIATE;
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CLOSE OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ALLOW_SNAPSHOT_ISOLATION OFF;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET READ_COMMITTED_SNAPSHOT OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_UPDATE_STATISTICS_ASYNC OFF,
                PAGE_VERIFY NONE,
                DATE_CORRELATION_OPTIMIZATION OFF,
                DISABLE_BROKER,
                PARAMETERIZATION SIMPLE,
                SUPPLEMENTAL_LOGGING OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET TRUSTWORTHY OFF,
        DB_CHAINING OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET HONOR_BROKER_PRIORITY OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET FILESTREAM(NON_TRANSACTED_ACCESS = OFF),
                CONTAINMENT = NONE 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CREATE_STATISTICS ON(INCREMENTAL = OFF),
                MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = OFF,
                DELAYED_DURABILITY = DISABLED 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE (QUERY_CAPTURE_MODE = ALL, FLUSH_INTERVAL_SECONDS = 900, INTERVAL_LENGTH_MINUTES = 60, MAX_PLANS_PER_QUERY = 200, CLEANUP_POLICY = (STALE_QUERY_THRESHOLD_DAYS = 367), MAX_STORAGE_SIZE_MB = 100) 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE = OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE SCOPED CONFIGURATION SET MAXDOP = 0;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET MAXDOP = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET LEGACY_CARDINALITY_ESTIMATION = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET LEGACY_CARDINALITY_ESTIMATION = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET PARAMETER_SNIFFING = ON;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET PARAMETER_SNIFFING = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET QUERY_OPTIMIZER_HOTFIXES = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET QUERY_OPTIMIZER_HOTFIXES = PRIMARY;
    END


GO
USE [$(DatabaseName)];


GO
IF fulltextserviceproperty(N'IsFulltextInstalled') = 1
    EXECUTE sp_fulltext_database 'enable';


GO
PRINT N'Creating [dbo].[Gry]...';


GO
CREATE TABLE [dbo].[Gry] (
    [Id_Gry]      INT          NOT NULL,
    [Tytul]       VARCHAR (50) NOT NULL,
    [Wydawnictwo] VARCHAR (50) NOT NULL,
    PRIMARY KEY CLUSTERED ([Id_Gry] ASC)
);


GO
PRINT N'Creating [dbo].[Rezerwacje_gier]...';


GO
CREATE TABLE [dbo].[Rezerwacje_gier] (
    [Id_Rezerwacji_Gry]   INT      NOT NULL,
    [Godzina_rozpoczecia] TIME (7) NOT NULL,
    [Godzina_zakonczenia] TIME (7) NOT NULL,
    [Id_Gry]              INT      NOT NULL,
    [Id_Uczestnika]       INT      NOT NULL,
    PRIMARY KEY CLUSTERED ([Id_Rezerwacji_Gry] ASC)
);


GO
PRINT N'Creating [dbo].[Budynki]...';


GO
CREATE TABLE [dbo].[Budynki] (
    [Id_Budynku]         INT           NOT NULL,
    [Nazwa]              VARCHAR (50)  NOT NULL,
    [Adres]              VARCHAR (100) NOT NULL,
    [Godzina_otwarcia]   DATE          NOT NULL,
    [Godzina_zamkniecia] DATE          NOT NULL,
    PRIMARY KEY CLUSTERED ([Id_Budynku] ASC)
);


GO
PRINT N'Creating [dbo].[Sale]...';


GO
CREATE TABLE [dbo].[Sale] (
    [Id_sali]    INT NOT NULL,
    [Pojemnosc]  INT NOT NULL,
    [Id_Budynku] INT NOT NULL,
    PRIMARY KEY CLUSTERED ([Id_sali] ASC)
);


GO
PRINT N'Creating [dbo].[Rezerwacje_prelekcji]...';


GO
CREATE TABLE [dbo].[Rezerwacje_prelekcji] (
    [Id_Rezerwacji_Prelekcji] INT NOT NULL,
    [Id_Uczestnika]           INT NOT NULL,
    [Id_Prelekcji]            INT NOT NULL,
    PRIMARY KEY CLUSTERED ([Id_Rezerwacji_Prelekcji] ASC)
);


GO
PRINT N'Creating [dbo].[Prelekcje]...';


GO
CREATE TABLE [dbo].[Prelekcje] (
    [Id_Prelekcji]        INT      NOT NULL,
    [Godzina_rozpoczecia] TIME (7) NOT NULL,
    [Id_Zgloszenia]       INT      NOT NULL,
    [Id_Sali]             INT      NOT NULL,
    PRIMARY KEY CLUSTERED ([Id_Prelekcji] ASC)
);


GO
PRINT N'Creating [dbo].[Zgloszenia]...';


GO
CREATE TABLE [dbo].[Zgloszenia] (
    [Id_Zgloszenia] INT           NOT NULL,
    [Temat]         VARCHAR (50)  NOT NULL,
    [Opis]          VARCHAR (250) NOT NULL,
    [Status]        NVARCHAR (50) NOT NULL,
    [Id_Uczestnika] INT           NOT NULL,
    PRIMARY KEY CLUSTERED ([Id_Zgloszenia] ASC)
);


GO
PRINT N'Creating [dbo].[Bloki]...';


GO
CREATE TABLE [dbo].[Bloki] (
    [Id_Bloku]      INT           NOT NULL,
    [Nazwa]         VARCHAR (50)  NOT NULL,
    [Opis]          VARCHAR (250) NULL,
    [Id_Uczestnika] INT           NOT NULL,
    PRIMARY KEY CLUSTERED ([Id_Bloku] ASC)
);


GO
PRINT N'Creating [dbo].[Funkcje]...';


GO
CREATE TABLE [dbo].[Funkcje] (
    [Id_Funkcji]  INT          NOT NULL,
    [Nazwa]       VARCHAR (50) NOT NULL,
    [Cena_biletu] MONEY        NOT NULL,
    PRIMARY KEY CLUSTERED ([Id_Funkcji] ASC)
);


GO
PRINT N'Creating [dbo].[Uczestnicy]...';


GO
CREATE TABLE [dbo].[Uczestnicy] (
    [Id_Uczestnika]      INT          NOT NULL,
    [Imie]               VARCHAR (50) NOT NULL,
    [Nazwisko]           VARCHAR (50) NOT NULL,
    [Wiek]               INT          NOT NULL,
    [Nocleg]             INT          NOT NULL,
    [Email]              VARCHAR (50) NOT NULL,
    [Hasło]              VARCHAR (50) NOT NULL,
    [Nick]               VARCHAR (50) NOT NULL,
    [Telefon_kontaktowy] INT          NULL,
    [Id_Funkcji]         INT          NOT NULL,
    PRIMARY KEY CLUSTERED ([Id_Uczestnika] ASC)
);


GO
PRINT N'Creating [dbo].[FK_Rezerwacje_gier_Gry]...';


GO
ALTER TABLE [dbo].[Rezerwacje_gier]
    ADD CONSTRAINT [FK_Rezerwacje_gier_Gry] FOREIGN KEY ([Id_Gry]) REFERENCES [dbo].[Gry] ([Id_Gry]) ON DELETE CASCADE;


GO
PRINT N'Creating [dbo].[FK_Rezerwacje_gier_Uczestnicy]...';


GO
ALTER TABLE [dbo].[Rezerwacje_gier]
    ADD CONSTRAINT [FK_Rezerwacje_gier_Uczestnicy] FOREIGN KEY ([Id_Uczestnika]) REFERENCES [dbo].[Uczestnicy] ([Id_Uczestnika]) ON DELETE CASCADE;


GO
PRINT N'Creating [dbo].[FK_Sale_Budynki]...';


GO
ALTER TABLE [dbo].[Sale]
    ADD CONSTRAINT [FK_Sale_Budynki] FOREIGN KEY ([Id_Budynku]) REFERENCES [dbo].[Budynki] ([Id_Budynku]) ON DELETE CASCADE;


GO
PRINT N'Creating [dbo].[FK_Rezerwacje_prelekcji_Uczestnicy]...';


GO
ALTER TABLE [dbo].[Rezerwacje_prelekcji]
    ADD CONSTRAINT [FK_Rezerwacje_prelekcji_Uczestnicy] FOREIGN KEY ([Id_Uczestnika]) REFERENCES [dbo].[Uczestnicy] ([Id_Uczestnika]) ON DELETE CASCADE;


GO
PRINT N'Creating [dbo].[FK_Rezerwacje_prelekcji_Prelekcje]...';


GO
ALTER TABLE [dbo].[Rezerwacje_prelekcji]
    ADD CONSTRAINT [FK_Rezerwacje_prelekcji_Prelekcje] FOREIGN KEY ([Id_Prelekcji]) REFERENCES [dbo].[Prelekcje] ([Id_Prelekcji]) ON DELETE CASCADE;


GO
PRINT N'Creating [dbo].[FK_Prelekcje_Zgloszenia]...';


GO
ALTER TABLE [dbo].[Prelekcje]
    ADD CONSTRAINT [FK_Prelekcje_Zgloszenia] FOREIGN KEY ([Id_Zgloszenia]) REFERENCES [dbo].[Zgloszenia] ([Id_Zgloszenia]) ON DELETE CASCADE;


GO
PRINT N'Creating [dbo].[FK_Prelekcje_Sale]...';


GO
ALTER TABLE [dbo].[Prelekcje]
    ADD CONSTRAINT [FK_Prelekcje_Sale] FOREIGN KEY ([Id_Sali]) REFERENCES [dbo].[Sale] ([Id_sali]) ON DELETE CASCADE;


GO
PRINT N'Creating [dbo].[FK_Zgloszenia_Uczestnicy]...';


GO
ALTER TABLE [dbo].[Zgloszenia]
    ADD CONSTRAINT [FK_Zgloszenia_Uczestnicy] FOREIGN KEY ([Id_Uczestnika]) REFERENCES [dbo].[Uczestnicy] ([Id_Uczestnika]) ON DELETE CASCADE;


GO
PRINT N'Creating [dbo].[FK_Bloki_Uczestnicy]...';


GO
ALTER TABLE [dbo].[Bloki]
    ADD CONSTRAINT [FK_Bloki_Uczestnicy] FOREIGN KEY ([Id_Uczestnika]) REFERENCES [dbo].[Uczestnicy] ([Id_Uczestnika]) ON DELETE CASCADE;


GO
PRINT N'Creating [dbo].[FK_Uczestnicy_Funkcje]...';


GO
ALTER TABLE [dbo].[Uczestnicy]
    ADD CONSTRAINT [FK_Uczestnicy_Funkcje] FOREIGN KEY ([Id_Funkcji]) REFERENCES [dbo].[Funkcje] ([Id_Funkcji]) ON DELETE CASCADE;


GO
-- Refactoring step to update target server with deployed transaction logs

IF OBJECT_ID(N'dbo.__RefactorLog') IS NULL
BEGIN
    CREATE TABLE [dbo].[__RefactorLog] (OperationKey UNIQUEIDENTIFIER NOT NULL PRIMARY KEY)
    EXEC sp_addextendedproperty N'microsoft_database_tools_support', N'refactoring log', N'schema', N'dbo', N'table', N'__RefactorLog'
END
GO
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'cfe8328e-4891-4b9d-8d42-e11ad5d949b5')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('cfe8328e-4891-4b9d-8d42-e11ad5d949b5')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'b497177a-9e5b-4d5f-9a2c-c8be35b1fdf3')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('b497177a-9e5b-4d5f-9a2c-c8be35b1fdf3')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '9834d940-7630-46a1-b55c-5fd67e17c012')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('9834d940-7630-46a1-b55c-5fd67e17c012')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '772aa945-9dd3-458f-8114-7fe2a311626c')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('772aa945-9dd3-458f-8114-7fe2a311626c')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '728ad1e8-b6a3-45eb-928b-1c9cc3b062d9')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('728ad1e8-b6a3-45eb-928b-1c9cc3b062d9')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'b81cce38-82e7-48b4-a74d-4278327ecee7')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('b81cce38-82e7-48b4-a74d-4278327ecee7')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '499414c1-00d7-4395-9102-3e50ddf4d08e')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('499414c1-00d7-4395-9102-3e50ddf4d08e')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '3101afc5-0417-4f4c-a47f-13a62dbc7d5c')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('3101afc5-0417-4f4c-a47f-13a62dbc7d5c')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'a95cb150-92df-4e7c-82c7-1fd4618c2806')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('a95cb150-92df-4e7c-82c7-1fd4618c2806')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'b968f77b-e93a-4d72-a663-4395fb5d2130')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('b968f77b-e93a-4d72-a663-4395fb5d2130')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '3ca30b56-0a58-4df4-a6fc-ffe370c0e1aa')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('3ca30b56-0a58-4df4-a6fc-ffe370c0e1aa')

GO

GO
DECLARE @VarDecimalSupported AS BIT;

SELECT @VarDecimalSupported = 0;

IF ((ServerProperty(N'EngineEdition') = 3)
    AND (((@@microsoftversion / power(2, 24) = 9)
          AND (@@microsoftversion & 0xffff >= 3024))
         OR ((@@microsoftversion / power(2, 24) = 10)
             AND (@@microsoftversion & 0xffff >= 1600))))
    SELECT @VarDecimalSupported = 1;

IF (@VarDecimalSupported > 0)
    BEGIN
        EXECUTE sp_db_vardecimal_storage_format N'$(DatabaseName)', 'ON';
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET MULTI_USER 
    WITH ROLLBACK IMMEDIATE;


GO
PRINT N'Update complete.';


GO
